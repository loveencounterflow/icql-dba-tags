{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA-TAGS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\nguy                       = require 'guy'\n\n\n#===========================================================================================================\n### RegEx from https://github.com/loveencounterflow/paragate/blob/master/src/htmlish.grammar.coffee with\nthe additional exlusion of `+`, `-`, ':' which are used in TagExes ###\nname_re = /^[^-+:\\s!?=\\{\\[\\(<\\/>\\)\\]\\}'\"]+$/u\n\n#---------------------------------------------------------------------------------------------------------\n### TAINT pattern does not allow for escaped quotes ###\n### TAINT re-use `name_re` ###\ntagex_re = ///\n  ^\n  (?<mode>  [ - + ] )\n  (?<tag>   [ a-z A-Z _ \\/ \\$ ] [ - a-z A-Z 0-9 _ \\/ \\$ ]* )\n  ( : (?<value> [^ - + ]+ | ' .* ' | \" .* \" ) )?\n  $\n  ///u\n\n\n#===========================================================================================================\ntypes.declare 'dbatags_constructor_cfg', tests:\n  '@isa.object x':                ( x ) -> @isa.object x\n  'x.prefix is a prefix':         ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  \"x.fallbacks in [ true, false, 'all', ]\": ( x ) -> x.fallbacks in [ true, false, 'all', ]\n  \"@isa.integer x.first_id\":      ( x ) -> @isa.integer x.first_id\n  \"@isa.integer x.last_id\":       ( x ) -> @isa.integer x.last_id\n  \"( @type_of x.dba ) is 'dba'\":  ( x ) -> ( @type_of x.dba ) is 'dba'\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tag', tests:\n  '( x.match name_re )?':       ( x ) -> ( x.match name_re )?\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_mode', tests:\n  \"x in [ '+', '-', ]\":         ( x ) -> x in [ '+', '-', ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tag_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.dbatags_tag x.tag':     ( x ) -> @isa.dbatags_tag x.tag\n  '@isa.dbatags_mode x.mode':   ( x ) -> @isa.dbatags_mode x.mode\n  'not x.nr?':                  ( x ) -> not x.nr?\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tagged_range_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.lo':          ( x ) -> @isa.integer x.lo ### TAINT add boundary check ###\n  '@isa.integer x.hi':          ( x ) -> @isa.integer x.hi ### TAINT add boundary check ###\n  '@isa.dbatags_tag x.tag':     ( x ) -> @isa.dbatags_tag x.tag\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tagchain_from_id_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.id':          ( x ) -> @isa.integer x.id ### TAINT add boundary check ###\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_id_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.id':          ( x ) -> @isa.integer x.id ### TAINT add boundary check ###\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_parse_tagex_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.nonempty_text x.tagex': ( x ) -> @isa.nonempty_text x.tagex\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_tagchain_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.list x.tagchain':       ( x ) -> @isa.list x.tagchain\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_tagexchain_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_markup_text_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.text x.text':           ( x ) -> @isa.text x.text\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dbatags_constructor_cfg:\n    dba:        null\n    prefix:     't_'\n    fallbacks:  false\n    first_id:   0x000000\n    last_id:    0x10ffff\n  dbatags_add_tag_cfg:\n    nr:         null\n    mode:       '+'\n    tag:        null\n    value:      false\n  dbatags_add_tagged_range_cfg:\n    mode:       '+'\n    tag:        null\n    lo:         null\n    hi:         null\n    value:      null\n  dbatags_parse_tagex_cfg:\n    tagex:      null\n  dbatags_tagchain_from_id_cfg:\n    id:         null\n  dbatags_tags_from_id_cfg:\n    id:         null\n  dbatags_tags_from_tagchain_cfg:\n    tagchain:   null\n  dbatags_tags_from_tagexchain_cfg:\n    tagexchain: null\n\n#===========================================================================================================\nclass @Dtags\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dbatags_constructor_cfg @cfg = { types.defaults.dbatags_constructor_cfg..., cfg..., }\n    #.......................................................................................................\n    guy.props.def @, 'dba', { enumerable: false, value: @cfg.dba, }\n    delete @cfg.dba\n    #.......................................................................................................\n    @cfg              = freeze @cfg\n    @_tag_max_nr      = 0\n    @_cache_filled    = false\n    @_text_regions_re = null ### TAINT implicit cache interaction ###\n    @_create_db_structure()\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    { prefix\n      first_id\n      last_id   } = @cfg\n    @dba.execute SQL\"\"\"\n      create table if not exists #{prefix}tags (\n          nr      integer not null,\n          tag     text    not null primary key,\n          value   json    not null default 'true' );\n      create table if not exists #{prefix}tagged_ranges (\n          nr      integer not null primary key,\n          lo      integer not null,\n          hi      integer not null,\n          mode    boolean not null,\n          tag     text    not null references #{prefix}tags ( tag ),\n          value   json    not null );\n      create index if not exists #{prefix}tags_nr_idx on #{prefix}tags          ( nr );\n      create index if not exists #{prefix}idlohi_idx on  #{prefix}tagged_ranges ( lo, hi );\n      create index if not exists #{prefix}idhi_idx on    #{prefix}tagged_ranges ( hi );\n      create table if not exists #{prefix}contiguous_ranges (\n          lo      integer not null,\n          hi      integer not null,\n          tags    json    not null,\n          primary key ( lo, hi ) );\n      create view #{prefix}_potential_inflection_points as\n        select id from ( select cast( null as integer ) as id where false\n          union select #{first_id}\n          union select #{last_id}\n          union select distinct lo      from #{prefix}tagged_ranges\n          union select distinct hi + 1  from #{prefix}tagged_ranges )\n        order by id asc;\n      create view #{prefix}tags_and_rangelists as\n        select\n          'g' || row_number() over ()     as key,\n          tags                            as tags,\n          #{prefix}collect_many( lo, hi ) as ranges\n        from #{prefix}contiguous_ranges\n        group by tags\n        order by tags;\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    prefix = @cfg.prefix\n    sql =\n      insert_tag: SQL\"\"\"\n        insert into #{prefix}tags ( nr, tag, value )\n          values ( $nr, $tag, $value );\"\"\"\n          # on conflict ( tag ) do nothing;\"\"\"\n      insert_tagged_range: SQL\"\"\"\n        insert into #{prefix}tagged_ranges ( lo, hi, mode, tag, value )\n          values ( $lo, $hi, $mode, $tag, $value )\"\"\"\n      insert_contiguous_range: SQL\"\"\"\n        insert into #{prefix}contiguous_ranges ( lo, hi, tags )\n          values ( $lo, $hi, $tags )\"\"\"\n      tagchain_from_id: SQL\"\"\"\n        select\n            nr,\n            mode,\n            tag,\n            value\n          from #{prefix}tagged_ranges\n          where $id between lo and hi\n          order by nr asc;\"\"\"\n      cached_tags_from_id: SQL\"\"\"\n        select\n            tags\n          from #{prefix}contiguous_ranges\n          where $id between lo and hi\n          limit 1;\"\"\"\n      get_fallbacks: SQL\"\"\"\n        select * from #{prefix}tags\n          order by nr;\"\"\"\n      potential_inflection_points: SQL\"\"\"\n        select id from #{prefix}_potential_inflection_points;\"\"\"\n      truncate_contiguous_ranges: SQL\"\"\"\n        delete from #{prefix}contiguous_ranges;\"\"\"\n      get_contiguous_ranges: SQL\"\"\"\n        select * from #{prefix}contiguous_ranges order by lo, hi, tags;\"\"\"\n      get_tagged_ranges: SQL\"\"\"\n        select nr, lo, hi, mode, tag, value\n        from #{@cfg.prefix}tagged_ranges\n        order by nr;\"\"\"\n      get_tags_and_rangelists: SQL\"\"\"\n        select key, tags, ranges\n        from #{@cfg.prefix}tags_and_rangelists\n        order by key;\"\"\"\n    guy.props.def @, 'sql', { enumerable: false, value: sql, }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    prefix  = @cfg.prefix\n    @f      = {}\n    # #.......................................................................................................\n    # @dba.create_function\n    #   name:           \"#{prefix}_tags_from_id\",\n    #   deterministic:  true,\n    #   varargs:        false,\n    #   call:           ( id ) =>\n    #     fallbacks = @get_filtered_fallbacks()\n    #     tagchain  = @tagchain_from_id { id, }\n    #     tags      = @tags_from_tagchain { tagchain, }\n    #     return JSON.stringify { fallbacks..., tags..., }\n    #.......................................................................................................\n    ### TAINT put these into separate module like `icql-dba-standard` ###\n    @dba.create_window_function\n      name:           prefix + 'collect'\n      varargs:        false\n      start:          -> []\n      step:           ( total, element ) -> total.push element; total\n      inverse:        ( total, dropped ) -> total.pop(); total\n      result:         ( total ) -> JSON.stringify total\n    #.......................................................................................................\n    @dba.create_window_function\n      name:           prefix + 'collect_many'\n      varargs:        true\n      start:          -> []\n      step:           ( total, elements... ) -> total.push elements; total\n      inverse:        ( total, dropped ) -> total.pop(); total\n      result:         ( total ) -> JSON.stringify total\n    #.......................................................................................................\n    @f.cid_from_chr = ( chr ) -> chr.codePointAt 0\n    @f.chr_from_cid = ( cid ) -> String.fromCodePoint cid\n    @f.to_hex       = ( cid ) -> '0x' + cid.toString 16\n    @dba.create_function name: 'chr_from_cid', call: @f.chr_from_cid\n    @dba.create_function name: 'cid_from_chr', call: @f.cid_from_chr\n    @dba.create_function name: 'to_hex',       call: @f.to_hex\n    #.......................................................................................................\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tag: ( cfg ) ->\n    validate.dbatags_add_tag_cfg cfg = { types.defaults.dbatags_add_tag_cfg..., cfg..., }\n    cfg.value ?= true\n    cfg.value  = JSON.stringify cfg.value\n    @_tag_max_nr++\n    cfg.nr     = @_tag_max_nr\n    @dba.run @sql.insert_tag, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tagged_range: ( cfg ) ->\n    validate.dbatags_add_tagged_range_cfg cfg = { types.defaults.dbatags_add_tagged_range_cfg..., cfg..., }\n    cfg.value ?= if cfg.mode is '+' then true else false\n    cfg.value  = JSON.stringify cfg.value\n    @_on_add_tagged_range()\n    @dba.run @sql.insert_tagged_range, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  tagchain_from_id: ( cfg ) ->\n    validate.dbatags_tagchain_from_id_cfg cfg = { types.defaults.dbatags_tagchain_from_id_cfg..., cfg..., }\n    R = []\n    for row from @dba.query @sql.tagchain_from_id, cfg\n      row.value = JSON.parse row.value\n      R.push row\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _tags_from_id_uncached: ( cfg ) ->\n    validate.dbatags_tags_from_id_cfg cfg = { types.defaults.dbatags_tags_from_id_cfg..., cfg..., }\n    { id, } = cfg\n    R       = @get_filtered_fallbacks()\n    Object.assign R, @tags_from_tagchain { tagchain: ( @tagchain_from_id cfg ), }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_id: ( cfg ) ->\n    ### TAINT implicit cache interaction ###\n    @_create_minimal_contiguous_ranges() unless @_cache_filled\n    validate.dbatags_tags_from_id_cfg cfg = { types.defaults.dbatags_tags_from_id_cfg..., cfg..., }\n    return JSON.parse @dba.first_value @dba.query @sql.cached_tags_from_id, cfg\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_tagex: ( cfg ) ->\n    validate.dbatags_parse_tagex_cfg cfg = { types.defaults.dbatags_parse_tagex_cfg..., cfg..., }\n    { tagex, } = cfg\n    unless ( match = tagex.match tagex_re )?\n      throw new E.Dtags_invalid_tagex '^dtags@777^', tagex\n    { mode, tag, value, }   = match.groups\n    switch mode\n      when '+'\n        value ?= 'true'\n      when '-'\n        if value?\n          throw new E.Dtags_subtractive_value '^dtags@778^', tagex\n        value = 'false'\n    try value = JSON.parse value catch error\n      throw new E.Dtags_illegal_tagex_value_literal '^dtags@779^', tagex, error.message\n    return { mode, tag, value, }\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagchain: ( cfg ) ->\n    ### TAINT make deletion bahvior configurable ###\n    ### TAINT allow to seed result with fallbacks ###\n    validate.dbatags_tags_from_tagchain_cfg cfg = { types.defaults.dbatags_tags_from_tagchain_cfg..., cfg..., }\n    R             = {}\n    { tagchain, } = cfg\n    return R if tagchain.length is 0\n    for tag in tagchain\n      { mode, tag, value, } = tag\n      switch mode\n        when '+' then R[ tag ] = value\n        when '-' then delete R[ tag ]\n        # when '-' then R[ tag ] = value\n        else throw new E.Dtags_unexpected '^dtags@780^', \"unknown tag mode in #{rpr tag}\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagexchain: ( cfg ) ->\n    validate.dbatags_tags_from_tagexchain_cfg cfg = { types.defaults.dbatags_tags_from_tagexchain_cfg..., cfg..., }\n    tagchain = ( ( @parse_tagex { tagex, } ) for tagex in cfg.tagexchain )\n    return @tags_from_tagchain { tagchain, }\n\n\n  #=========================================================================================================\n  # TAGGED TEXT REGIONS\n  #---------------------------------------------------------------------------------------------------------\n  _on_add_tagged_range: ->\n    ### TAINT implicit cache interaction ###\n    @dba.execute @sql.truncate_contiguous_ranges\n    @_text_regions_re = null ### TAINT mark cached value or collect in `@cache` ###\n    @_cache_filled    = false\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_minimal_contiguous_ranges: ->\n    ### Iterate over all potential inflection points (the boundaries of all tagged ranges) to find at which\n    points an actual change in the tagset occurs; these endpoints are then (together with the tagsets)\n    inserted into table `t_contiguous_ranges`. ###\n    @_on_add_tagged_range() ### TAINT implicit cache interaction ###\n    pi_ids        = ( row.id for row from @dba.query @sql.potential_inflection_points )\n    last_idx      = pi_ids.length - 1\n    last_id       = pi_ids[ last_idx ]\n    prv_tags      = null\n    ids_and_tags  = []\n    #.......................................................................................................\n    for idx in [ 0 ... pi_ids.length - 1 ]\n      id    = pi_ids[ idx ]\n      tags  = JSON.stringify @_tags_from_id_uncached { id, }\n      continue if tags is prv_tags\n      prv_tags  = tags\n      ids_and_tags.push { id, tags, }\n    ids_and_tags.push { id: last_id, tags: null, }\n    #.......................................................................................................\n    for idx in [ 0 ... ids_and_tags.length - 1 ]\n      entry = ids_and_tags[ idx ]\n      lo    = entry.id\n      hi    = ids_and_tags[ idx + 1 ].id - 1\n      tags  = entry.tags\n      @dba.run @sql.insert_contiguous_range, { lo, hi, tags, }\n    #.......................................................................................................\n    @_cache_filled = true ### TAINT implicit cache interaction ###\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _regex_chr_class_from_range: ( range ) ->\n    ### TAINT make addition of spaces configurable, e.g. as `all_groups_extra: '\\\\s'`  ###\n    [ lo, hi, ] = range\n    return \"\\\\u{#{lo.toString 16}}\" if lo is hi\n    return \"\\\\u{#{lo.toString 16}}-\\\\u{#{hi.toString 16}}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  get_tagsets_by_keys: ->\n    @_create_minimal_contiguous_ranges() unless @_cache_filled ### TAINT implicit cache interaction ###\n    R = {}\n    for { key, tags, } from @dba.query SQL\"select * from #{@cfg.prefix}tags_and_rangelists;\"\n      R[ key ] = JSON.parse tags\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _build_text_regions_re: ->\n    parts = []\n    for { key, tags, ranges, } from @dba.query SQL\"select * from #{@cfg.prefix}tags_and_rangelists;\"\n      ranges = JSON.parse ranges\n      ranges = ( ( @_regex_chr_class_from_range range ) for range in ranges ).join ''\n      parts.push \"(?<#{key}>[#{ranges}]+)\"\n    parts = parts.join '|'\n    return @_text_regions_re = new RegExp parts, 'gu'\n\n  #---------------------------------------------------------------------------------------------------------\n  find_tagged_regions: ( text ) ->\n    ### TAINT use `cfg` ###\n    ### TAINT may want to use new `/.../d` flag when it becomes available ###\n    re    = @_text_regions_re ? @_build_text_regions_re() ### TAINT implicit cache interaction ###\n    # debug '^33436^', re\n    R     = []\n    stop  = 0\n    #.......................................................................................................\n    for match from text.matchAll re\n      { index: start, } = match\n      for key, part of match.groups\n        break if part?\n      if start > stop\n        part      = text[ stop ... start ]\n        # warn stop, start, CND.reverse rpr part\n        new_stop  = start + part.length\n        R.push { key: 'missing', start: stop, stop: new_stop, part, }\n        stop      = new_stop\n        continue\n      #.....................................................................................................\n      stop += part.length\n      # info start, stop, key, rpr part\n      R.push { key, start, stop, part, }\n    #.......................................................................................................\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  _markup_text: ( cfg ) ->\n    validate.dbatags_markup_text_cfg cfg = { types.defaults.dbatags_markup_text_cfg..., cfg..., }\n    R         = []\n    { text, } = cfg\n    tagsets   = @get_tagsets_by_keys()\n    for region in regions = @find_tagged_regions text\n      region.tags = tagsets[ region.key ]\n      R.push region\n    return R\n\n  #=========================================================================================================\n  # TABLE GETTERS\n  #---------------------------------------------------------------------------------------------------------\n  get_tags: ->\n    R   = {}\n    sql = SQL\"select nr, tag, value as fallback from #{@cfg.prefix}tags order by nr;\"\n    for { nr, tag, fallback, } from @dba.query sql\n      fallback  = JSON.parse fallback\n      R[ tag ]  = { nr, fallback, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_tagged_ranges: ->\n    R = []\n    for { nr, lo, hi, mode, tag, value, } from @dba.query @sql.get_tagged_ranges\n      value = JSON.parse value\n      R.push { nr, lo, hi, mode, tag, value, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_filtered_fallbacks: ->\n    return {} if @cfg.fallbacks is false\n    R = @get_fallbacks()\n    return R if @cfg.fallbacks is 'all'\n    for tag, value of R\n      delete R[ tag ] if value is false\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_fallbacks: ->\n    R = {}\n    for row from @dba.query @sql.get_fallbacks\n      R[ row.tag ] = JSON.parse row.value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_continuous_ranges: ( cfg ) ->\n    ### TAINT implicit cache interaction ###\n    @_create_minimal_contiguous_ranges() unless @_cache_filled\n    R = []\n    for { lo, hi, tags, } from @dba.query @sql.get_contiguous_ranges\n      tags = JSON.parse tags\n      R.push { lo, hi, tags, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_tags_and_rangelists: ( cfg ) ->\n    ### TAINT implicit cache interaction ###\n    @_create_minimal_contiguous_ranges() unless @_cache_filled\n    R = []\n    for { key, tags, ranges, } from @dba.query @sql.get_tags_and_rangelists\n      tags    = JSON.parse tags\n      ranges  = JSON.parse ranges\n      R.push { key, tags, ranges, }\n    return R\n\n"
  ]
}