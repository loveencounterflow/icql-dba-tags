{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\n{ lets\n  freeze }                = require 'letsfreezethat'\nE                         = require './errors'\n{ Dba, }                  = require 'icql-dba'\n\n\n#===========================================================================================================\ntypes.declare 'dbatags_constructor_cfg', tests:\n  '@isa.object x':        ( x ) -> @isa.object x\n  'x.prefix is a prefix': ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n  \"x.fallbacks in [ true, false, 'all', ]\": ( x ) -> x.fallbacks in [ true, false, 'all', ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tag', tests:\n  '@isa.nonempty_text x':       ( x ) -> @isa.nonempty_text x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_mode', tests:\n  \"x in [ '+', '-', ]\":         ( x ) -> x in [ '+', '-', ]\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tag_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.dbatags_tag x.tag':     ( x ) -> @isa.dbatags_tag x.tag\n  '@isa.dbatags_mode x.mode':   ( x ) -> @isa.dbatags_mode x.mode\n  'not x.nr?':                  ( x ) -> not x.nr?\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tagged_range_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.lo':          ( x ) -> @isa.integer x.lo\n  '@isa.integer x.hi':          ( x ) -> @isa.integer x.hi\n  '@isa.dbatags_tag x.tag':     ( x ) -> @isa.dbatags_tag x.tag\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tagchain_from_id_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.id':          ( x ) -> @isa.integer x.id\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_id_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.integer x.id':          ( x ) -> @isa.integer x.id\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_parse_tagex_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.nonempty_text x.tagex': ( x ) -> @isa.nonempty_text x.tagex\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_tagchain_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.list x.tagchain':       ( x ) -> @isa.list x.tagchain\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tags_from_tagexchain_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dbatags_constructor_cfg:\n    dba:        null\n    prefix:     't_'\n    fallbacks:  false\n  dbatags_add_tag_cfg:\n    nr:         null\n    mode:       '+'\n    tag:        null\n    value:      false\n  dbatags_add_tagged_range_cfg:\n    mode:       '+'\n    tag:        null\n    lo:         null\n    hi:         null\n    value:      null\n  dbatags_parse_tagex_cfg:\n    tagex:      null\n  dbatags_tagchain_from_id_cfg:\n    id:         null\n  dbatags_tags_from_id_cfg:\n    id:         null\n  dbatags_tags_from_tagchain_cfg:\n    tagchain:   null\n  dbatags_tags_from_tagexchain_cfg:\n    tagexchain: null\n\n#===========================================================================================================\nclass @Dtags\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dbatags_constructor_cfg @cfg = { types.defaults.dbatags_constructor_cfg..., cfg..., }\n    #.......................................................................................................\n    if @cfg.dba?\n      @dba  = @cfg.dba\n      delete @cfg.dba\n    else\n      @dba  = new Dba()\n    #.......................................................................................................\n    @cfg          = freeze @cfg\n    @_tag_max_nr  = 0\n    @_create_db_structure()\n    @_compile_sql()\n    @_create_sql_functions()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    x = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create table if not exists #{x}tags (\n          nr      integer not null,\n          tag     text    not null primary key,\n          value   json    not null default 'true' );\n      create table if not exists #{x}tagged_ranges (\n          nr      integer not null primary key,\n          lo      integer not null,\n          hi      integer not null,\n          mode    boolean not null,\n          tag     text    not null references #{x}tags ( tag ),\n          value   json    not null );\n      create index if not exists #{x}tags_nr_idx on #{x}tags          ( nr );\n      create index if not exists #{x}idlohi_idx on  #{x}tagged_ranges ( lo, hi );\n      create index if not exists #{x}idhi_idx on    #{x}tagged_ranges ( hi );\n      create table if not exists #{x}tagged_ids_cache (\n          id      integer not null primary key,\n          tags    json    not null );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    x = @cfg.prefix\n    @sql =\n      insert_tag: SQL\"\"\"\n        insert into #{x}tags ( nr, tag, value )\n          values ( $nr, $tag, $value );\"\"\"\n          # on conflict ( tag ) do nothing;\"\"\"\n      insert_tagged_range: SQL\"\"\"\n        insert into #{x}tagged_ranges ( lo, hi, mode, tag, value )\n          values ( $lo, $hi, $mode, $tag, $value )\"\"\"\n      tagchain_from_id: SQL\"\"\"\n        select\n            nr,\n            mode,\n            tag,\n            value\n          from #{x}tagged_ranges\n          where $id between lo and hi\n          order by nr asc;\"\"\"\n      cached_tags_from_id: SQL\"\"\"\n        select\n            tags\n          from #{x}tagged_ids_cache\n          where id = $id;\"\"\"\n      insert_cached_tags: SQL\"\"\"\n        insert into #{x}tagged_ids_cache ( id, tags )\n          values ( $id, $tags );\"\"\"\n      get_fallbacks: SQL\"\"\"\n        select * from #{x}tags\n          order by nr;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_sql_functions: ->\n    # x = @cfg.prefix\n    # #.......................................................................................................\n    # @dba.create_function\n    #   name:           \"#{x}_tags_from_id\",\n    #   deterministic:  true,\n    #   varargs:        false,\n    #   call:           ( id ) =>\n    #     fallbacks = @get_filtered_fallbacks()\n    #     tagchain  = @tagchain_from_id { id, }\n    #     tags      = @tags_from_tagchain { tagchain, }\n    #     return JSON.stringify { fallbacks..., tags..., }\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tag: ( cfg ) ->\n    validate.dbatags_add_tag_cfg cfg = { types.defaults.dbatags_add_tag_cfg..., cfg..., }\n    cfg.value ?= true\n    cfg.value  = JSON.stringify cfg.value\n    @_tag_max_nr++\n    cfg.nr     = @_tag_max_nr\n    @dba.run @sql.insert_tag, cfg\n    @_clear_cache_for_range cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_cache_for_range: ( cfg ) ->\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tagged_range: ( cfg ) ->\n    validate.dbatags_add_tagged_range_cfg cfg = { types.defaults.dbatags_add_tagged_range_cfg..., cfg..., }\n    cfg.value ?= if cfg.mode is '+' then true else false\n    cfg.value  = JSON.stringify cfg.value\n    @dba.run @sql.insert_tagged_range, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  get_filtered_fallbacks: ->\n    return {} if @cfg.fallbacks is false\n    R = @get_fallbacks()\n    return R if @cfg.fallbacks is 'all'\n    for tag, value of R\n      delete R[ tag ] if value is false\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  get_fallbacks: ->\n    R = {}\n    for row from @dba.query @sql.get_fallbacks\n      R[ row.tag ] = JSON.parse row.value\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tagchain_from_id: ( cfg ) ->\n    validate.dbatags_tagchain_from_id_cfg cfg = { types.defaults.dbatags_tagchain_from_id_cfg..., cfg..., }\n    R = []\n    for row from @dba.query @sql.tagchain_from_id, cfg\n      row.value = JSON.parse row.value\n      R.push row\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_id: ( cfg ) ->\n    validate.dbatags_tags_from_id_cfg cfg = { types.defaults.dbatags_tags_from_id_cfg..., cfg..., }\n    { id, } = cfg\n    R       = [ ( @dba.query @sql.cached_tags_from_id, cfg )..., ]\n    return JSON.parse R[ 0 ].tags if R.length > 0\n    R       = @get_filtered_fallbacks()\n    Object.assign R, @tags_from_tagchain { tagchain: ( @tagchain_from_id cfg ), }\n    @dba.run @sql.insert_cached_tags, { id, tags: ( JSON.stringify R ), }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TAINT pattern does not allow for escaped quotes ###\n  tagex_pattern: ///\n    ^\n    (?<mode>  [ - + ] )\n    (?<tag>   [ a-z A-Z _ \\/ \\$ ] [ - a-z A-Z 0-9 _ \\/ \\$ ]* )\n    ( : (?<value> [^ - + ]+ | ' .* ' | \" .* \" ) )?\n    $\n    ///\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_tagex: ( cfg ) ->\n    validate.dbatags_parse_tagex_cfg cfg = { types.defaults.dbatags_parse_tagex_cfg..., cfg..., }\n    { tagex, } = cfg\n    unless ( match = tagex.match @tagex_pattern )?\n      throw new E.Dtags_invalid_tagex '^dtags@777^', tagex\n    { mode, tag, value, }   = match.groups\n    switch mode\n      when '+'\n        value ?= 'true'\n      when '-'\n        if value?\n          throw new E.Dtags_subtractive_value '^dtags@778^', tagex\n        value = 'false'\n    try value = JSON.parse value catch error\n      throw new E.Dtags_illegal_tagex_value_literal '^dtags@779^', tagex, error.message\n    return { mode, tag, value, }\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagchain: ( cfg ) ->\n    ### TAINT make deletion bahvior configurable ###\n    ### TAINT allow to seed result with fallbacks ###\n    validate.dbatags_tags_from_tagchain_cfg cfg = { types.defaults.dbatags_tags_from_tagchain_cfg..., cfg..., }\n    R             = {}\n    { tagchain, } = cfg\n    return R if tagchain.length is 0\n    for tag in tagchain\n      { mode, tag, value, } = tag\n      switch mode\n        when '+' then R[ tag ] = value\n        when '-' then delete R[ tag ]\n        # when '-' then R[ tag ] = value\n        else throw new E.Dtags_unexpected '^dtags@780^', \"unknown tag mode in #{rpr tag}\"\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagexchain: ( cfg ) ->\n    validate.dbatags_tags_from_tagexchain_cfg cfg = { types.defaults.dbatags_tags_from_tagexchain_cfg..., cfg..., }\n    tagchain = ( ( @parse_tagex { tagex, } ) for tagex in cfg.tagexchain )\n    return @tags_from_tagchain { tagchain, }\n\n\n\n"
  ]
}