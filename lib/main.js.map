{
  "version": 3,
  "file": "",
  "sourceRoot": "",
  "sources": [
    "../src/main.coffee"
  ],
  "names": [],
  "mappings": "AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,KAAA,GAA4B,IAAI,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC,SAA5B,CAAA;;EAC5B,CAAA,CAAE,GAAF,EACE,OADF,EAEE,QAFF,EAGE,gBAHF,CAAA,GAG4B,KAAK,CAAC,MAAN,CAAA,CAH5B,EAhBA;;;EAqBA,GAAA,GAA4B,MAAM,CAAC;;EACnC,EAAA,GAA4B,IAAI,CAAC;;EACjC,EAAA,GAA4B,IAAI,CAAC;;EACjC,CAAA,CAAE,IAAF,EACE,MADF,CAAA,GAC4B,OAAA,CAAQ,gBAAR,CAD5B;;EAEA,CAAA,GAA4B,OAAA,CAAQ,UAAR,EA1B5B;;;EA8BA,KAAK,CAAC,OAAN,CAAc,yBAAd,EAAyC;IAAA,KAAA,EACvC;MAAA,eAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAAxB;MACA,sBAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;QACtB,KAAoB,IAAC,CAAA,GAAG,CAAC,IAAL,CAAU,CAAC,CAAC,MAAZ,CAApB;AAAA,iBAAO,MAAP;;QACA,IAAe,CAAC,CAAC,MAAF,KAAY,EAA3B;AAAA,iBAAO,KAAP;;AACA,eAAS,oBAAsB,CAAC,IAAzB,CAA8B,CAAC,CAAC,MAAhC;MAHe;IADxB;EADuC,CAAzC,EA9BA;;;EAsCA,KAAK,CAAC,OAAN,CAAc,aAAd,EAA6B;IAAA,KAAA,EAC3B;MAAA,sBAAA,EAAwB,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAnB;MAAT;IAAxB;EAD2B,CAA7B,EAtCA;;;EA0CA,KAAK,CAAC,OAAN,CAAc,qBAAd,EAAqC;IAAA,KAAA,EACnC;MAAA,eAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA5B;MACA,wBAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAC,CAAC,GAAnB;MAAT;IAD5B;EADmC,CAArC,EA1CA;;;EA+CA,KAAK,CAAC,OAAN,CAAc,8BAAd,EAA8C;IAAA,KAAA,EAC5C;MAAA,eAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA5B;MACA,mBAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,EAAf;MAAT,CAD5B;MAEA,mBAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,EAAf;MAAT,CAF5B;MAGA,wBAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,WAAL,CAAiB,CAAC,CAAC,GAAnB;MAAT;IAH5B;EAD4C,CAA9C,EA/CA;;;EAsDA,KAAK,CAAC,OAAN,CAAc,+BAAd,EAA+C;IAAA,KAAA,EAC7C;MAAA,eAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA5B;MACA,oBAAA,EAA4B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,CAAC,CAAC,GAAf;MAAT;IAD5B;EAD6C,CAA/C,EAtDA;;;EA2DA,KAAK,CAAC,OAAN,CAAc,yBAAd,EAAyC;IAAA,KAAA,EACvC;MAAA,eAAA,EAA8B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,MAAL,CAAY,CAAZ;MAAT,CAA9B;MACA,4BAAA,EAA8B,QAAA,CAAE,CAAF,CAAA;eAAS,IAAC,CAAA,GAAG,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB;MAAT;IAD9B;EADuC,CAAzC,EA3DA;;;EAgEA,KAAK,CAAC,QAAN,GACE;IAAA,uBAAA,EACE;MAAA,GAAA,EAAY,IAAZ;MACA,MAAA,EAAY;IADZ,CADF;IAGA,mBAAA,EACE;MAAA,GAAA,EAAY;IAAZ,CAJF;IAKA,4BAAA,EACE;MAAA,GAAA,EAAY,IAAZ;MACA,EAAA,EAAY,IADZ;MAEA,EAAA,EAAY;IAFZ,CANF;IASA,6BAAA,EACE;MAAA,GAAA,EAAY;IAAZ,CAVF;IAWA,uBAAA,EACE;MAAA,KAAA,EAAY;IAAZ;EAZF,EAjEF;;;EAgFM,IAAC,CAAA;IAAP,MAAA,MAAA,CAAA;;MAEE,WAAa,CAAE,GAAF,CAAA;QACX,QAAQ,CAAC,uBAAT,CAAiC,IAAC,CAAA,GAAD,GAAO,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,uBAAjB,EAA6C,GAAA,GAA7C,CAAxC;QACA,IAAG,oBAAH;UACE,IAAC,CAAA,GAAD,GAAQ,IAAC,CAAA,GAAG,CAAC;UACb,OAAO,IAAC,CAAA,GAAG,CAAC,IAFd;SAAA,MAAA;UAIE,IAAC,CAAA,GAAD,GAAQ,IAAI,CAAE,OAAA,CAAQ,UAAR,CAAF,CAAsB,CAAC,GAA3B,CAAA,EAJV;;QAKA,IAAC,CAAA,GAAD,GAAO,MAAA,CAAO,IAAC,CAAA,GAAR;QACP,IAAC,CAAA,oBAAD,CAAA;QACA,IAAC,CAAA,YAAD,CAAA;AACA,eAAO;MAVI,CADf;;;MAcE,oBAAsB,CAAA,CAAA;AACxB,YAAA;QAAI,CAAA,GAAI,IAAC,CAAA,GAAG,CAAC;QACT,IAAC,CAAA,GAAG,CAAC,OAAL,CAAa,GAAG,CAAA,2BAAA,CAAA,CACe,CADf,CAAA;;;2BAAA,CAAA,CAIe,CAJf,CAAA;;;;;;;wCAAA,CAAA,CAW4B,CAX5B,CAAA;;2BAAA,CAAA,CAae,CAbf,CAAA,eAAA,CAAA,CAakC,CAblC,CAAA;2BAAA,CAAA,CAce,CAdf,CAAA,eAAA,CAAA,CAckC,CAdlC,CAAA;2BAAA,CAAA,CAee,CAff,CAAA;;;;;6BAAA,CAAhB;AAsBA,eAAO;MAxBa,CAdxB;;;MAyCE,YAAc,CAAA,CAAA;AAChB,YAAA;QAAI,CAAA,GAAI,IAAC,CAAA,GAAG,CAAC;QACT,IAAC,CAAA,GAAD,GACE;UAAA,UAAA,EAAY,GAAG,CAAA,YAAA,CAAA,CACC,CADD,CAAA;0BAAA,CAAf;;UAIA,mBAAA,EAAqB,GAAG,CAAA,YAAA,CAAA,CACR,CADQ,CAAA;0CAAA,CAJxB;UAOA,aAAA,EAAe,GAAG,CAAA;;;OAAA,CAAA,CAIP,CAJO,CAAA;;kBAAA;QAPlB;AAcF,eAAO;MAjBK,CAzChB;;;MA6DE,OAAS,CAAE,GAAF,CAAA;QACP,QAAQ,CAAC,mBAAT,CAA6B,GAAA,GAAM,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,mBAAjB,EAAyC,GAAA,GAAzC,CAAnC;;UACA,GAAG,CAAC,QAAS;;QACb,GAAG,CAAC,KAAJ,GAAa,EAAA,CAAG,GAAG,CAAC,KAAP;QACb,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,UAAd,EAA0B,GAA1B;QACA,IAAC,CAAA,sBAAD,CAAwB,GAAxB;AACA,eAAO;MANA,CA7DX;;;MAsEE,sBAAwB,CAAE,GAAF,CAAA,EAAA,CAtE1B;;;MAyEE,gBAAkB,CAAE,GAAF,CAAA;QAChB,QAAQ,CAAC,4BAAT,CAAsC,GAAA,GAAM,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,4BAAjB,EAAkD,GAAA,GAAlD,CAA5C;;UACA,GAAG,CAAC,QAAS;;QACb,GAAG,CAAC,KAAJ,GAAa,EAAA,CAAG,GAAG,CAAC,KAAP;QACb,IAAC,CAAA,GAAG,CAAC,GAAL,CAAS,IAAC,CAAA,GAAG,CAAC,mBAAd,EAAmC,GAAnC;AACA,eAAO;MALS,CAzEpB;;;MAiFE,iBAAmB,CAAE,GAAF,CAAA;AACrB,YAAA,CAAA,EAAA,GAAA,EAAA;QAAI,QAAQ,CAAC,6BAAT,CAAuC,GAAA,GAAM,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,6BAAjB,EAAmD,GAAA,GAAnD,CAA7C;QACA,CAAA,GAAM;AACN;;;QAAA,KAAA,UAAA;UAAA,CAAC,CAAC,IAAF,CAAO,CAAE,GAAG,CAAC,GAAN,EAAW,GAAG,CAAC,KAAf,CAAP;QAAA;AACA,eAAO;MAJU,CAjFrB;;;MAwFE,aAAe,CAAE,GAAF,CAAA;QACb,MAAM,IAAI,KAAJ,CAAU,iBAAV;MADO,CAxFjB;;;MAqGE,WAAa,CAAE,GAAF,CAAA;AACf,YAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA;QAAI,QAAQ,CAAC,uBAAT,CAAiC,GAAA,GAAM,CAAE,GAAA,KAAK,CAAC,QAAQ,CAAC,uBAAjB,EAA6C,GAAA,GAA7C,CAAvC;QACA,CAAA,CAAE,KAAF,CAAA,GAAa,GAAb;QACA,IAAO,iDAAP;UACE,MAAM,IAAI,CAAC,CAAC,mBAAN,CAA0B,aAA1B,EAAyC,KAAzC,EADR;;QAEA,CAAA,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb,CAAA,GAA0B,KAAK,CAAC,MAAhC;AACA,gBAAO,IAAP;AAAA,eACO,GADP;;cAEI,QAAS;;AADN;AADP,eAGO,GAHP;YAII,IAAG,aAAH;cACE,MAAM,IAAI,CAAC,CAAC,uBAAN,CAA8B,aAA9B,EAA6C,KAA7C,EADR;;YAEA,KAAA,GAAQ;AANZ;AAOA;UAAI,KAAA,GAAQ,IAAI,CAAC,KAAL,CAAW,KAAX,EAAZ;SAA6B,cAAA;UAAM;UACjC,MAAM,IAAI,CAAC,CAAC,iCAAN,CAAwC,aAAxC,EAAuD,KAAvD,EAA8D,KAAK,CAAC,OAApE,EADqB;;AAE7B,eAAO,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb;MAfI,CArGf;;;MAuHE,kBAAoB,CAAE,QAAF,CAAA;AACtB,YAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,KAAA,EAAA;QAAI,QAAQ,CAAC,IAAT,CAAc,QAAd;QACA,CAAA,GAAI,CAAA;QACJ,IAAY,QAAQ,CAAC,MAAT,KAAmB,CAA/B;AAAA,iBAAO,EAAP;;QACA,KAAA,0CAAA;;UACE,CAAA,CAAE,IAAF,EAAQ,GAAR,EAAa,KAAb,CAAA,GAAwB,IAAC,CAAA,WAAD,CAAa,CAAE,KAAF,CAAb,CAAxB;AACA,kBAAO,IAAP;AAAA,iBACO,GADP;cACgB,CAAC,CAAE,GAAF,CAAD,GAAW;AAApB;AADP,iBAEO,GAFP;cAEgB,OAAO,CAAC,CAAE,GAAF;AAAjB;AAFP;cAGO,MAAM,IAAI,CAAC,CAAC,gBAAN,CAAuB,aAAvB,EAAsC,CAAA,sBAAA,CAAA,CAAyB,GAAA,CAAI,KAAJ,CAAzB,CAAA,CAAtC;AAHb;QAFF;AAMA,eAAO;MAVW;;IAxHtB;;;oBA6FE,aAAA,GAAe;;;;;AA7KjB",
  "sourcesContent": [
    "\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'ICQL-DBA/TESTS/BASICS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntypes                     = new ( require 'intertype' ).Intertype\n{ isa\n  type_of\n  validate\n  validate_list_of }      = types.export()\n# { to_width }              = require 'to-width'\nSQL                       = String.raw\njr                        = JSON.stringify\njp                        = JSON.parse\n{ lets\n  freeze }                = require 'letsfreezethat'\nE                         = require './errors'\n\n\n#===========================================================================================================\ntypes.declare 'dbatags_constructor_cfg', tests:\n  '@isa.object x':        ( x ) -> @isa.object x\n  'x.prefix is a prefix': ( x ) ->\n    return false unless @isa.text x.prefix\n    return true if x.prefix is ''\n    return ( /^[_a-z][_a-z0-9]*$/ ).test x.prefix\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tag', tests:\n  '@isa.nonempty_text x': ( x ) -> @isa.nonempty_text x\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tag_cfg', tests:\n  '@isa.object x':            ( x ) -> @isa.object x\n  '@isa.dbatags_tag x.tag':   ( x ) -> @isa.dbatags_tag x.tag\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_add_tagged_range_cfg', tests:\n  '@isa.object x':            ( x ) -> @isa.object x\n  '@isa.integer x.lo':        ( x ) -> @isa.integer x.lo\n  '@isa.integer x.hi':        ( x ) -> @isa.integer x.hi\n  '@isa.dbatags_tag x.tag':   ( x ) -> @isa.dbatags_tag x.tag\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_tagchain_from_cid_cfg', tests:\n  '@isa.object x':            ( x ) -> @isa.object x\n  '@isa.integer x.cid':       ( x ) -> @isa.integer x.cid\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.declare 'dbatags_parse_tagex_cfg', tests:\n  '@isa.object x':              ( x ) -> @isa.object x\n  '@isa.nonempty_text x.tagex': ( x ) -> @isa.nonempty_text x.tagex\n\n#-----------------------------------------------------------------------------------------------------------\ntypes.defaults =\n  dbatags_constructor_cfg:\n    dba:        null\n    prefix:     't_'\n  dbatags_add_tag_cfg:\n    tag:        null\n  dbatags_add_tagged_range_cfg:\n    tag:        null\n    lo:         null\n    hi:         null\n  dbatags_tagchain_from_cid_cfg:\n    cid:        null\n  dbatags_parse_tagex_cfg:\n    tagex:      null\n\n#===========================================================================================================\nclass @Dtags\n  #---------------------------------------------------------------------------------------------------------\n  constructor: ( cfg ) ->\n    validate.dbatags_constructor_cfg @cfg = { types.defaults.dbatags_constructor_cfg..., cfg..., }\n    if @cfg.dba?\n      @dba  = @cfg.dba\n      delete @cfg.dba\n    else\n      @dba  = new ( require 'icql-dba' ).Dba()\n    @cfg = freeze @cfg\n    @_create_db_structure()\n    @_compile_sql()\n    return undefined\n\n  #---------------------------------------------------------------------------------------------------------\n  _create_db_structure: ->\n    x = @cfg.prefix\n    @dba.execute SQL\"\"\"\n      create table if not exists #{x}tags (\n        tag   text unique not null primary key,\n        value json not null default 'true' );\n      create table if not exists #{x}tagged_ranges (\n          nr      integer primary key,\n          lo      integer not null,\n          hi      integer not null,\n          -- chr_lo  text generated always as ( chr_from_cid( lo ) ) virtual not null,\n          -- chr_hi  text generated always as ( chr_from_cid( hi ) ) virtual not null,\n          mode    boolean not null,\n          tag     text    not null references #{x}tags ( tag ),\n          value   json    not null );\n      create index if not exists #{x}cidlohi_idx on #{x}tagged_ranges ( lo, hi );\n      create index if not exists #{x}cidhi_idx on   #{x}tagged_ranges ( hi );\n      create table if not exists #{x}tagged_cids_cache (\n          cid     integer not null,\n          -- chr     text    not null,\n          tag     text    not null,\n          value   json    not null,\n        primary key ( cid, tag ) );\n      \"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _compile_sql: ->\n    x = @cfg.prefix\n    @sql =\n      insert_tag: SQL\"\"\"\n        insert into #{x}tags ( tag, value )\n          values ( $tag, $value );\"\"\"\n          # on conflict ( tag ) do nothing;\"\"\"\n      insert_tagged_range: SQL\"\"\"\n        insert into #{x}tagged_ranges ( lo, hi, mode, tag, value )\n          values ( $lo, $hi, $mode, $tag, $value )\"\"\"\n      tags_from_cid: SQL\"\"\"\n        select\n            tag,\n            value\n          from #{x}tagged_ranges\n          where $cid between lo and hi\n          order by nr asc;\"\"\"\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tag: ( cfg ) ->\n    validate.dbatags_add_tag_cfg cfg = { types.defaults.dbatags_add_tag_cfg..., cfg..., }\n    cfg.value ?= true\n    cfg.value  = jr cfg.value\n    @dba.run @sql.insert_tag, cfg\n    @_clear_cache_for_range cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  _clear_cache_for_range: ( cfg ) ->\n\n  #---------------------------------------------------------------------------------------------------------\n  add_tagged_range: ( cfg ) ->\n    validate.dbatags_add_tagged_range_cfg cfg = { types.defaults.dbatags_add_tagged_range_cfg..., cfg..., }\n    cfg.value ?= true\n    cfg.value  = jr cfg.value\n    @dba.run @sql.insert_tagged_range, cfg\n    return null\n\n  #---------------------------------------------------------------------------------------------------------\n  tagchain_from_cid: ( cfg ) ->\n    validate.dbatags_tagchain_from_cid_cfg cfg = { types.defaults.dbatags_tagchain_from_cid_cfg..., cfg..., }\n    R   = []\n    R.push [ row.tag, row.value, ] for row from @dba.query @sql.tags_from_cid, { cid: cfg.cid, }\n    return R\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_cid: ( cfg ) ->\n    throw new Error 'XXXXXXXXXXXXXXX'\n\n  #---------------------------------------------------------------------------------------------------------\n  tagex_pattern: ///\n    ^\n    (?<mode>  [ - + ] )\n    (?<tag>   [ a-z A-Z _ \\/ \\$ ] [ - a-z A-Z 0-9 _ \\/ \\$ ]* )\n    ( : (?<value> [^ - + ]+ | ' .* ' | \" .* \" ) )?\n    $\n    ///\n\n  #---------------------------------------------------------------------------------------------------------\n  parse_tagex: ( cfg ) ->\n    validate.dbatags_parse_tagex_cfg cfg = { types.defaults.dbatags_parse_tagex_cfg..., cfg..., }\n    { tagex, } = cfg\n    unless ( match = tagex.match @tagex_pattern )?\n      throw new E.Dtags_invalid_tagex '^dtags@448^', tagex\n    { mode, tag, value, }   = match.groups\n    switch mode\n      when '+'\n        value ?= 'true'\n      when '-'\n        if value?\n          throw new E.Dtags_subtractive_value '^dtags@222^', tagex\n        value = 'false'\n    try value = JSON.parse value catch error\n      throw new E.Dtags_illegal_tagex_value_literal '^dtags@222^', tagex, error.message\n    return { mode, tag, value, }\n\n  #---------------------------------------------------------------------------------------------------------\n  tags_from_tagchain: ( tagchain ) ->\n    validate.list tagchain\n    R = {}\n    return R if tagchain.length is 0\n    for tagex in tagchain\n      { mode, tag, value, } = @parse_tagex { tagex, }\n      switch mode\n        when '+' then R[ tag ] = value\n        when '-' then delete R[ tag ]\n        else throw new E.Dtags_unexpected '^dtags@222^', \"unknown tagex mode in #{rpr tagex}\"\n    return R\n\n\n"
  ]
}